This paper aims to make a fair comparison between open source and closed source
projects. The comparison is based on different aspects of these sort of
projects, such as number of contributors / employees, number of features
introduced in a timeframe, number of vulnerabilities (bugs or more serious
problems) of the software, project management techniques, as well as revenue.
First of all, the number of contributors is a relevant metric because of how
the two different models work. Open source projects do not aim for a particular
contributor / employee number, but they are relying their entire ecosystem and
development on the work of contributors from all around the globe. As such, it
is quite customary for projects of this kind to have a huge number of
contributors, all working as much as their time allows them to, whenever they
want. On the opposite side, the closed source projects rely on employees to
develop the software, which usually work in shifts of 4 to 8 hours a day. The
second metric that we discuss in this paper is the number of features
introduced. Open source projects rely on contributors to make their
contributions to different sides of the software. If a number of contributors
show interest for the same feature, then it is likely that it will get done
quicker, however if the effort is spread, it is not unlikely that features may
fail to arise for a longer time. In closed source projects, it is often the
case that a special team is assigned a certain feature, and that is their only
task to do, which could lead to faster feature development. The third metric is
the number of vulnerabilities. Open source projects are quite fast to respond
to such security issues, especially given the big number of people working on
some of these projects. Closed source projects, with their static nature, do
not respond fast to these treats due to their small focus on security (bigger
focus on feature development, which leads to bigger profits). We will see how
this affects the stability and reliability of applications. The fourth metric
is the projects management techniques employed. As stated above, closed source
projects have a very strict hierarchy, with movements inside this hierarchy
happening very rarely and very slowly. Open source projects, on the other hand,
have almost no hierarchy at all. There is a thin layer of people at the top
guiding the project development as a whole, and the rest of the manpower is
composed of developers working on their favourite part of the codebase,
switching as they see fit to other parts of the project, or other projects
altogether. The fifth and last metric, is the revenue. While closed source
projects actively chase this and base their entire marketing strategy around
making profit, open source projects aim to develop software "for-free", and
most projects receive no funding at all, or survive by donations of users.
Still, there are quite a few open source projects that do receive funding for
their continued development, mainly because their product is used directly or
indirectly by companies in their business strategy. We shall see later on how
funding leads to more contributors in the open source, which leads to bigger
funding and so on, creating a benefic cycle for the parts involved.
